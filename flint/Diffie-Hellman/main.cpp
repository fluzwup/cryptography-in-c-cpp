#include <string.h>
#include <stdio.h>
#include <stdlib.h>

// FLINT bignum libraries, from "Cryptography in C and C++" by Michael Welschenbach, Apress
#include "../src/flintpp.h"
#include "../src/random.h"

int InitRand (STATEPRNG& , const char*, int, int, int);
LINT RandLINT (int l, STATEPRNG& xrstate);

// the modulus values from RFC 3526, all of which have 2 as a primitive root
const char *prime_1536 =
		"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B"
		"22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7"
		"EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE4"
		"5B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208"
		"552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF";
const char *prime_2048 = 
		"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B2"
		"2514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7E"
		"C6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45"
		"B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F3562085"
		"52BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180"
		"E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898"
		"FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF";
const char *prime_3072 = 
		"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B2"
		"2514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7E"
		"C6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45"
		"B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F3562085"
		"52BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180"
		"E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898"
		"FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575"
		"D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06"
		"D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA"
		"074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF";
const char *prime_4096 = 
		"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B2"
		"2514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7E"
		"C6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45"
		"B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F3562085"
		"52BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180"
		"E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898"
		"FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575"
		"D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06"
		"D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA"
		"074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327"
		"186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C5"
		"9474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD006"
		"9127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF";

int main(int argc, char **argv)
{
	// length of secret to be exchanged
	unsigned short bits = 2048;

	if(argc == 2) bits = atoi(argv[1]);

    // long long int P, G, x, a, y, b, ka, kb;
	if(bits <= 16) 
	{
		printf("Bit length too small, must be greater than 16.\n");
		exit(0);
	}
	if(bits > 4096)
	{
		printf("Bit length too great, must be 4096 or less.\n");
		exit(0);
	}

	char *prime = NULL;
	if(bits <= 1536) 
		prime = (char *)prime_1536;
	else if(bits <= 2048) 
		prime = (char *)prime_2048;
	else if(bits <= 3072) 
		prime = (char *)prime_3072;
	else if(bits <= 4096) 
		prime = (char *)prime_4096;

	LINT P, G, a, b, x, y, ka, kb;

	STATEPRNG prngState;
	int missingBits = InitRand(prngState, "", 0, 200, FLINT_RNDRMDSHA1);
	if(missingBits > 0)
	{
		printf("Warning:  Insufficient entropy for generating RSA keys, %i bits short.\n\n", missingBits);
	}
	else if(missingBits < 0)
	{
		printf("Warning:  Selected prng not available.\n\n");
		return -1;
	}
  
	// pick the modulus prime, this is public 
	P = LINT(prime, 16);
	printf("P 0x%s\n\n", P.hexstr());

	// pick the primitive root of P (the generator, matches prime), this is public
	G = LINT("2", 16);
	printf("G 0x%s\n\n", G.hexstr());

	// set a lower bound for a and b of a similar magnitude to P
	LINT lower_bound = P / 256;

    // Alice will choose the private key a < P
	a = RandLINT(lower_bound, P, prngState);
	printf("a 0x%s\n\n", a.hexstr());

	// x = G^a mod P
    x = mexpkm(G, a, P); // gets the generated key
	printf("x 0x%s\n\n", x.hexstr());

    // Bob will choose the private key b < P
	b = RandLINT(lower_bound, P, prngState);
	printf("b 0x%s\n\n", b.hexstr());

	// y = G^b mod P
    y = mexpkm(G, b, P); // gets the generated key
	printf("y 0x%s\n\n", y.hexstr());

	// x and y are exchanged; these encapsulate a and b securely

	// a is mixed with y, and b is mixed with x, generating the shared secret
	// because y is G^b mod P, y^a mod P is (G^b)^a mod P, or G^(ab) mod P
    ka = mexpkm(y, a, P); // Alice's computed secret, G^(ba) mod P
	printf("ka 0x%s\n\n", ka.hexstr());
    kb = mexpkm(x, b, P); // Bob's computed secret, G^(ab) mod P
	printf("kb 0x%s\n\n", kb.hexstr());

    // ka should equal kb
	if(ka == kb) printf("Secrets match, exchange successful\n");

    return 0;
}
